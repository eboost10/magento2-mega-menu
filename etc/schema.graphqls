type Query {
    EBoostMenus (
        identifiers: [String] @doc(description: "Identifier of the menu")
    ): EBoostMenus @resolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Menu") @doc(description: "The EBoostMenus query returns information about active menus") @cache(cacheIdentity: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Menu\\Identity")
    EBoostMenuNodes (
        identifier: String! @doc(description: "Identifier of nodes menu")
    ): EBoostMenuNodes @resolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node") @doc(description: "The EBoostMenuNodes query returns information about active nodes of a menu") @cache(cacheIdentity: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node\\Identity")
}

type EBoostMenus @doc(description: "Menus information") {
    items: [EBoostMenu!]! @doc(description: "An array of menus")
}

type EBoostMenu @doc(description: "EBoostMenu defines all menu information") {
    menu_id: Int! @doc(description: "Menu ID")
    identifier: String! @doc(description: "Menu identifier")
    title: String! @doc(description: "Menu title")
    css_class: String @doc(description: "Menu CSS class")
    creation_time: String! @doc(description: "Menu creation time")
    update_time: String! @doc(description: "Menu update time")
    nodes: EBoostMenuNodes @doc(description: "Menu nodes") @resolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Menu\\Field\\Nodes")
}

type EBoostMenuNodes @doc(description: "Menu nodes information") {
    items: [EBoostMenuNodeInterface!] @doc(description: "An array of menu nodes")
}

type EBoostMenuNode implements EBoostMenuNodeInterface, EBoostMenuNodeContentFieldInterface, EBoostMenuNodeImageFieldInterface @doc(description: "EBoost menu default node type") {
}

type EBoostMenuCmsPageNode implements EBoostMenuNodeInterface, EBoostMenuNodeContentFieldInterface @doc(description: "EBoost menu CMS page node type") {
}

type EBoostMenuCustomUrlNode implements EBoostMenuNodeInterface, EBoostMenuNodeContentFieldInterface, EBoostMenuNodeImageFieldInterface, EBoostMenuCustomUrlNodeInterface @doc(description: "EBoost menu custom URL node type") {
}

type EBoostMenuWrapperNode implements EBoostMenuNodeInterface @doc(description: "EBoost menu wrapper node type") {
}

interface EBoostMenuNodeInterface @typeResolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node\\InterfaceTypeResolver") @doc(description: "EBoostMenuNodeInterface contains the fields that are common to all types of nodes") {
    node_id: Int! @doc(description: "Node ID")
    menu_id: Int! @doc(description: "Menu ID")
    type: String! @doc(description: "Node type")
    classes: String @doc(description: "Node classes")
    parent_id: Int @doc(description: "Node parent ID")
    position: Int! @doc(description: "Node position")
    level: Int! @doc(description: "Node level")
    title: String @doc(description: "Node title")
    node_template: String @doc(description: "Node template")
    submenu_template: String @doc(description: "Node submenu template")
    creation_time: String! @doc(description: "Node creation time")
    update_time: String! @doc(description: "Node update time")
    url_key: String @doc(description: "Returns the url key when available")
    additional_data: [String!] @doc(description: "Node additional data")
}

interface EBoostMenuNodeContentFieldInterface @typeResolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node\\InterfaceTypeResolver") @doc(description: "EBoostMenuNodeContentFieldsInterface defines node content field") {
    content: String @doc(description: "Node content")
}

interface EBoostMenuNodeImageFieldInterface @typeResolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node\\InterfaceTypeResolver") @doc(description: "EBoostMenuNodeContentFieldsInterface defines node image fields") {
    image: String @doc(description: "Node image")
    image_alt_text: String @doc(description: "Node image alt text")
}

interface EBoostMenuCustomUrlNodeInterface @typeResolver(class: "EBoost\\Menu\\Model\\GraphQl\\Resolver\\Node\\InterfaceTypeResolver") @doc(description: "EBoostMenuCustomUrlNodeInterface contains custom URL nodes specific fields") {
    target: Boolean! @doc(description: "Node target (false for '_self', true for '_blank')")
}
